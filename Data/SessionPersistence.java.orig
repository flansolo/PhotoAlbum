package cs213.photoAlbum.model;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.util.HashMap;
import java.util.Map.Entry;
/**
 * @author Tian Qi Xiong 
 *
 */

public  class SessionPersistence implements Model, Serializable{	
	/**
	 * userlist- a hashmap containing all user objects
	 * storeDir- used for serialization
	 * storeFile- used for serialization
	 */
	
	private static final long serialVersionUID = 1L;


	public HashMap<String,User> userlist;
	public static final String storeDir="dat";
	public static final String storeFile="users.dat";
	
	

/**
 * Constructor for SessionPersistence with no args to create new 
 * instantiation of SessionPersistence object 
 */
public SessionPersistence(){

	
}


/**
 * 
 * reads in a user from storage into memory	
 * @param userID - unique ID of user used to log in
 * @return User object of user with this ID containing 
 * all constituent user data
 * @throws IOException 
 * @throws ClassNotFoundException
 */
public SessionPersistence readUser() throws IOException, 
	ClassNotFoundException{
	ObjectInputStream ois= new ObjectInputStream(
			new FileInputStream(storeDir+File.separator+storeFile));
	SessionPersistence sp= (SessionPersistence)ois.readObject();
	return sp;
	
}


/**
 * 
 * writes a user to storage from memory
 * @param user - user object containing all constituent user data
 *  to move to storage from memory
 * @throws IOException
 */

public void writeUser(SessionPersistence sp) throws IOException{
	ObjectOutputStream oos= new ObjectOutputStream(
			new FileOutputStream(storeDir+File.separator+storeFile));
	oos.writeObject(sp);

}





/**
 * adds a user, creates new user with unique user ID and puts in userlist
 * hashmap
 * @param userID- unique ID used for newly created user used for login
 */
public void addUser(String userID){
	User temp= new User(userID);
	userlist.put(userID, temp);
	
}

/**
 *
 * deletes specified user
 * @param userID - ID of user to be deleted
 */
public void deleteUser(String userID){
	userlist.remove(userID);
}

/**
 * 
 * get a list of existing users, identified by user ID's
 * @return
 */
public void getUsers(){
	if(userlist.isEmpty()){
		System.out.println("no users exist");
		return;
	}
	for(Entry<String, User> entry: userlist.entrySet()){
		System.out.println(entry.getKey()); 
	}
}


}
