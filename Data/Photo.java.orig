package cs213.photoAlbum.model;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;

/**
 * 
 * @author Bill Baker
 *
 */
public class Photo implements PhotoInterface {
	/**
	 * fileName - unique (per user) file name of photo
	 * caption - a caption of photo
	 * dateTime - date and time photo was taken
	 * tags - array lit storing tags of photo
	 */
	public String fileName;
	public String caption;
	public Calendar dateTime;
	public HashMap<String,Tag> tags= new HashMap<String,Tag>();
	public ArrayList<String> albumInstances;
	
	

/**
 * constructor creating new instantiation of Photo with file name
 * from user input	
 * @param fileName - specific file name for photo
 */
public Photo(String fileName){
	this.fileName=fileName;
	this.dateTime.set(Calendar.MILLISECOND, 0);
}
public String getDate() {
	return dateTime.toString();
}
public String toString()
{
	return this.caption;
}
public String getFileName()
{
	return this.fileName;
}


/**
 * alternate constructor creating new instantiation of Photo with file
 * name and caption from user input
 * @param fileName- specific file name for photo
 * @param caption- caption for photo
 */
public Photo(String fileName, String caption,Calendar dateTime){
	this.fileName = fileName;
	this.caption = caption;
	this.dateTime = dateTime;
	this.dateTime.set(Calendar.MILLISECOND,0);
}
	
/**
 * checks if another photo is identical to this photo
 * @param photo1- compared with this photo
 * @return true if photos are identical, false if not identical
 */
public boolean identicalPhotos(Photo photo1){
	if(photo1.equals(this.fileName))
	{
		return true;
	}
	return false;
	
}

/**
 * adds tag to photo OR 
 * advises tag already exists
 * @param tagType - string with tagType
 * @param tagValue - string with tagValue
 *  
 */
public void addTag (String tagType, String tagValue) {
	Tag temp = new Tag(tagType, tagValue);
	for(int i=0; i<tags.size();i++)
	{
		if(temp.equals(tags.get(i)))
		{
			System.out.println("Tag already exists for " + fileName+" "+tagType+":"+tagValue);
			
		}
	}
	tags.put(temp.tagValue, temp);
	System.out.println("Added tag:");
	System.out.println(fileName+" "+tagType+":"+tagValue);
	
}

/**
 * deletes tag from this photo
 * OR advises tag does not exist for photo
 * @param tagType - string of tagType
 * @param tagValue - string with tagValue
 * 
 */
public void deleteTag (String tagType, String tagValue) {
	
	Tag temp = new Tag(tagType,tagValue);
	boolean exist = false;
	for(int i=0;i<tags.size();i++)
	{
		if(tags.get(i).equals(temp))
		{
			tags.remove(i);
			exist = true;
			break;
		}
	}
	if(!exist)
	{
		System.out.println("Tag does not exist for " + fileName+" "+tagType+":"+tagValue);
	}else{
		System.out.println("Deleted tag:");
		System.out.println(fileName+" "+tagType+":"+tagValue);
	}
}

/**
 * lists Tags of photo
 * 
 * 
 */
public void listTags () {
	for(int i=0; i<tags.size();i++)
	{
		System.out.println("Tags:");
		if(tags.get(i).tagType.equals("location")){
			System.out.println("location:"+tags.get(i).tagValue);
		}
		
	}
	for(int j=0; j<tags.size();j++){
		if(tags.get(j).tagType.equals("people")){
			System.out.println("people:"+tags.get(j).tagValue);
		}
	}
}

/**
 * lists photo info:
 * filename, album, date, caption, tags
 */
public void listPhotoInfo(){
	System.out.println("Photo file name: "+fileName);
	String tempalb=null;
	for(int i=0; i<albumInstances.size();i++){
		tempalb=tempalb+","+albumInstances.get(i);
	}
	System.out.println("Album: "+tempalb);
	System.out.println("Date: "+dateTime.toString());
	System.out.println("Caption: "+caption);
	System.out.println("Tags:");
	listTags();
}

/**
 * 
 * @param photo - photo to re-caption
 * @param newCaption - new caption to replace old caption
 */
public void recaptionPhoto(String newCaption){
	this.caption = newCaption;
}

	
}
